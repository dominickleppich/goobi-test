var goobiWorkflowJS=function(e){"use strict";var t={};return e.buttons={init:function(e){$.extend(!0,t,e),$(".btn").hasClass("btn--toggle")&&$(".btn--toggle").off().on("click",(function(){$(this).next("div").slideToggle(300)}))}},e}((goobiWorkflowJS=function(e){"use strict";var t={};function o(){var e=JSON.parse(sessionStorage.getItem("wf_boxStatus"));$(".module__box--collapsable").each((function(){var t=$(this).attr("id"),o=$(this).find('[data-toggle="box-body"]').hasClass("closed");e[t]=!o})),sessionStorage.setItem("wf_boxStatus",JSON.stringify(e))}return e.box={init:function(){null==sessionStorage.getItem("wf_boxStatus")&&sessionStorage.setItem("wf_boxStatus",JSON.stringify(t)),this.getBoxStatus(),o(),$("body").on("click",".module__box--collapsable .module__box-title h1",(function(){$(this).find('[data-toggle="box-body"]').toggleClass("closed"),$(this).parents(".module__box-title").next().slideToggle(200,(function(){o()}))}))},getBoxStatus:function(){var e=JSON.parse(sessionStorage.getItem("wf_boxStatus"));null!=e&&$.each(e,(function(e,t){t?($("#"+e).find('[data-toggle="box-body"]').removeClass("closed"),$("#"+e).find(".module__box-body").show()):($("#"+e).find('[data-toggle="box-body"]').addClass("closed"),$("#"+e).find(".module__box-body").hide())}))}},e}((goobiWorkflowJS=function(e){"use strict";return e.bookmarks={init:function(){this.loadColorbox()},loadColorbox:function(){$.colorbox.remove(),$(".colorbox-image").colorbox({transition:"fade",rel:"colorbox-image",maxWidth:"90%",maxHeight:"90%"})}},e}(goobiWorkflowJS||{},jQuery))||{},jQuery))||{},jQuery);function reloadAllHandler(){$('a[id*="geonamesIndexTrigger-"]').on("click",(function(){var e=$(this).attr("data-row"),t=$(this).attr("data-datatype");$("#rowIndex").val(e),$("#rowType").val(t)})),$('a[id*="gndIndexTrigger-"]').on("click",(function(){var e=$(this).attr("data-row"),t=$(this).attr("data-datatype");$("#rowIndex").val(e),$("#rowType").val(t)})),$('a[id*="gndPersonIndexTrigger-"]').on("click",(function(){var e=$(this).attr("data-row"),t=$(this).attr("data-datatype");$("#rowIndex").val(e),$("#rowType").val(t)})),$("body").on("click",'a[id*="danteIndexTrigger-"]',(function(){var e=$(this).attr("data-row"),t=$(this).attr("data-datatype"),o=$(this).attr("data-groupindex");$("#rowIndex").val(e),$("#groupIndex").val(o),$("#rowType").val(t),$("#resultList").empty(),$("#danteInput").val(""),$("#updatePluginButton").click()})),$("body").on("click",'a[id*="processIndexTrigger-"]',(function(){var e=$(this).attr("data-row"),t=$(this).attr("data-datatype"),o=$(this).attr("data-groupindex");$("#rowIndex").val(e),$("#groupIndex").val(o),$("#rowType").val(t),$("#updatePluginButton").click()})),$("body").on("click",'a[id*="viafIndexTrigger-"]',(function(){var e=$(this).attr("data-row"),t=$(this).attr("data-datatype"),o=$(this).attr("data-groupindex");$("#rowIndex").val(e),$("#groupIndex").val(o),$("#rowType").val(t),$("#updatePluginButton").click()})),$("body").on("click",'a[id*="viafPersonIndexTrigger-"]',(function(){var e=$(this).attr("data-row"),t=$(this).attr("data-groupindex");$("#rowIndex").val(e),$("#groupIndex").val(t),$("#rowType").val("viafperson"),$("#updatePluginButton").click()}))}function addPaginationButtons(){$(".pagination-thumb")&&$(".pagination-thumb").remove()}function paginierungWertAnzeigen(){var e=document.getElementById("paginationInputFields"),t=document.getElementById("fictitious"),o=document.getElementById("paginierungWert");e.style.display=3==$("#paginationType").val()?"none":"",t.style.display=3==$("#paginationType").val()?"none":"",2!=$("#paginationType").val()&&5!=$("#paginationType").val()||(o.value="I"),1!=$("#paginationType").val()&&4!=$("#paginationType").val()||(o.value="1")}function selectClickedThumbnail(e){var t;t=document.getElementsByClassName("goobi-thumbnail");for(var o=0;o<t.length;o++)return t[o].className="goobi-thumbnail font-light",e.parentElement.parentElement.className="goobi-thumbnail img-active",document.getElementById("menu-form:scrollToThumb").value="false",!0}function loadThumbnails(){var e=parseInt($(".thumbnails").val());e&&($(".goobi-thumbnail").css("height",e+25+"px"),$(".goobi-thumbnail .thumb").css("max-height",e+"px"),$(".goobi-thumbnail .thumb canvas").css("max-height",e+"px"),$(".goobi-thumbnail").css("max-width",e+"px"),scrollToThumbnail())}function scrollToThumbnail(){$("#thumb_#{Metadaten.image.order}"),document.getElementById("menu-form:scrollToThumb").value}function setScrollPosition(){var e=$("#left").scrollTop();document.getElementById("menu-form:scrollPosition").value=e;var t=$("#structdata");if(null!=t){var o=t.scrollTop();document.getElementById("menu-form:scrollPositionStructData").value=o}}goobiWorkflowJS=function(e){"use strict";var t={selector:".textarea-html"};return e.tinymce={init:function(o){$.extend(!0,t,o),this.extendedTinyMceConfig={selector:t.selector,extended_valid_elements:"p",statusbar:!0,height:200,menu:{},plugins:["advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker","searchreplace wordcount visualblocks visualchars code insertdatetime media nonbreaking","save table contextmenu directionality emoticons template paste"],content_css:"css/content.css",toolbar:"undo redo | styleselect | bold italic underline strikethrough | bullist numlist | image table | fullscreen code",spellchecker_languages:"English=en_US,German=de_DE_frami",spellchecker_callback:function(e,t,o,i){tinymce.util.JSONRequest.sendRPC({url:"template/js/plugins/tinymce/js/tinymce/plugins/spellchecker/spellchecker.php",method:"spellcheck",params:{lang:this.getLanguage(),words:t.match(this.getWordCharPattern())},success:function(e){o(e)},error:function(e,t){console.log(e,t),i("Spellcheck error:"+t.status)}})},style_formats:[{title:"Headings",items:[{title:"Heading 1",format:"h1"},{title:"Heading 2",format:"h2"},{title:"Heading 3",format:"h3"},{title:"Heading 4",format:"h4"},{title:"Heading 5",format:"h5"},{title:"Heading 6",format:"h6"}]},{title:"Blocks",items:[{title:"Paragraph",format:"p"},{title:"Blockquote",format:"blockquote"},{title:"Div",format:"div"}]}],init_instance_callback:function(e){"readonly"===$("#"+e.id.replace(":","\\:")).attr("readonly")&&e.setMode("readonly");try{resizeReferenceFields(),$(e.getWin()).bind("resize",(function(){resizeReferenceFields()}))}catch(e){}},setup:function(e){e.on("blur",(function(t,o,i){e.save(),console.log("input id = ",e.id.replace(/:/g,"\\:")),$("#"+e.id.replace(/:/g,"\\:")).trigger("change")})),e.on("change",(function(){tinymce.triggerSave()}))}},e.tinymce.renderInputFields()},initTinyMce:function(){tinymce.init(e.tinymce.extendedTinyMceConfig)},renderInputFields:function(t){if("undefined"!=typeof tinyMCE){if(void 0===t||"begin"==t.status)for(var o in tinyMCE.editors)try{tinyMCE.editors[o].remove(),console.log("Removed editor "+o)}catch(e){console.log("Error occured during removing editors; ",e)}void 0!==t&&"success"!=t.status||e.tinymce.initTinyMce(t)}}},e}((goobiWorkflowJS=function(e){"use strict";var t={maxParallelRequests:100},o={};function i(e){return new Promise((function(t,i){setTimeout((function(){if(null!=e){var i=e.getContext("2d"),r=e.dataset;r||((r={}).image_small=e.getAttribute("data-image_small"),r.image_large=e.getAttribute("data-image_large"));var s=new Image;s.onload=function(){e.width,this.width,e.width=this.width,e.height=this.height,i.drawImage(s,0,0,this.width,this.height),o[e.id]={smallWidth:this.width-10,smallHeight:this.height-10,largeUrl:r.image_large},t()};var l=r.image_small;s.src=l,e.addEventListener("mouseout",n,!1),e.addEventListener("mousemove",a,!1)}}),100)}))}function n(e){i(e.currentTarget)}function a(e){var t=e.currentTarget,i=new Image;i.onload=function(){if(null!=o[t.id]){o[t.id].scaleX=(i.width-o[t.id].smallWidth)/o[t.id].smallWidth,o[t.id].scaleY=(i.height-o[t.id].smallHeight)/o[t.id].smallHeight;var n=function(e,t){var o=e.getBoundingClientRect();return{x:t.clientX-o.left-5,y:t.clientY-o.top-5}}(t,e);if(0!=$("#"+t.id+":hover").length){var a=o[t.id].scaleX,r=o[t.id].scaleY,s=t.getContext("2d");s.fillStyle="white",s.fillRect(0,0,t.width,t.height);var l=n.x*a,c=n.y*r;l<0&&(l=0),c<0&&(c=0),i.width-l<t.width&&(l=i.width-t.width),i.height-c<t.height&&(c=i.height-t.height),s.drawImage(i,-l,-c)}}},o[t.id]&&(i.src=o[t.id].largeUrl)}return e.thumbnails={init:function(e){e&&(this.config=$.extend(!0,{},t,e));var o=[];$(".thumbnails__thumb-canvas").each((function(e,t){o.push(t)}));let n=(a=o,r=this.config.maxParallelRequests,a.reduce(((e,t)=>(e[e.length-1].length<r?e[e.length-1].push(t):e.push([t]),e)),[[]]));var a,r;let s=new rxjs.Subject,l=rxjs.from(n).pipe(rxjs.operators.concatMap((e=>{let t=rxjs.from(e).pipe(rxjs.operators.mergeMap((e=>{let t=i(e);return s.next(t),this.isActiveElement(e)&&s.complete(),t})));return rxjs.forkJoin(t)})));rxjs.forkJoin(l).subscribe();var c=document.querySelector("#pageContentRight");c.querySelector("#thumbnails")&&c.scrollTo(0,0);var d=document.querySelector(".thumbnails__thumb.active");if(d){let e=[];s.subscribe({next:t=>e.push(t),error:t=>e.push(t),complete:()=>{Promise.all(e).then((()=>{d.scrollIntoView({block:"center"})}))}})}},isActiveElement:function(e){return e.parentElement.parentElement.parentElement.classList.contains("active")}},e.updateSelectedThumbnail=function(e){var t;t=document.getElementsByClassName("thumbnails__thumb");for(var o=0;o<t.length;o++)t[o].className="thumbnails__thumb";return e.parentElement.parentElement.className="thumbnails__thumb active",!0},e}((goobiWorkflowJS=function(e){"use strict";var t={metseditorPagesOverview:!0,metseditorPagesAllPages:!1,metseditorPagesQuickassign:!1},o={};function i(){var e=JSON.parse(o);$.each(e,(function(e,t){t&&$("#"+e).addClass("show")}))}function n(){var e=JSON.parse(o);$("body").on("click",'[data-target="#metseditorPagesOverview"], [data-target="#metseditorPagesAllPages"], [data-target="#metseditorPagesQuickassign"]',(function(){var t=$(this).attr("aria-controls");$.each(e,(function(o){e[o]=o==t,sessionStorage.setItem("wf_structdataTabStatus",JSON.stringify(e))}))}))}return e.structdata={init:function(){null==sessionStorage.getItem("wf_structdataTabStatus")||null==sessionStorage.getItem("wf_structdataTabStatus")?(sessionStorage.setItem("wf_structdataTabStatus",JSON.stringify(t)),o=sessionStorage.getItem("wf_structdataTabStatus"),i(),n()):(o=sessionStorage.getItem("wf_structdataTabStatus"),i(),n())}},e}((goobiWorkflowJS=function(e){"use strict";var t={selectPage:{label:0},structure:{link:0}};return e.scrollPositions={init:function(){(function(){var e;null==sessionStorage.getItem("wf_scrollPositions")?(sessionStorage.setItem("wf_scrollPositions",JSON.stringify(t)),e=JSON.parse(sessionStorage.getItem("wf_scrollPositions")),$("#pageContentLeft").scrollTop(e.structure.link)):(e=JSON.parse(sessionStorage.getItem("wf_scrollPositions")),$("#pageContentLeft").scrollTop(e.structure.link))})(),$("body").on("click","#meStructure button",(function(){t.structure.link=$(this).parents("tr").position().top,sessionStorage.setItem("wf_scrollPositions",JSON.stringify(t))}))}},e}((goobiWorkflowJS=function(e){"use strict";return e.progress={init:function(e){},displayProgressBar:function(){var e=document.getElementById("progressPanel");"block"==e.style.display?e.style.display="none":e.style.display="block",document.getElementById("progressbutton").click()}},e}((goobiWorkflowJS=function(e){"use strict";return e.printpage={init:function(e){},print:function(e){var t=document.getElementById("pageContentLeft").innerHTML,o=document.createElement("link");o.rel="stylesheet",o.type="text/css",o.href=e+"/uii/template/css/intranda.css?version=1";var i=window.open("","","");i.document.getElementsByTagName("head")[0].appendChild(o),i.document.body.innerHTML=t,i.window.print(),i.close()}},e}((goobiWorkflowJS=function(e){"use strict";var t=null,o=null,i=null,n=[],a=["#ff4433"],r={global:{divId:"mainImage",useTiles:!0,footerHeight:0,adaptContainerHeight:!1,zoomSlider:".zoom-slider",zoomSliderHandle:".zoom-slider-handle",zoomSliderLabel:"#zoomSliderLabel input",persistZoom:!1,persistRotation:!1,persistenceId:""},image:{mimeType:"image/jpeg",tileSource:""}},s={borderWidth:2,borderColor:"#ff4433"},l={controls:{xAxis:{rotateLeft:"#rotate-left-x",rotateRight:"#rotate-right-x"},yAxis:{rotateLeft:"#rotate-left-y",rotateRight:"#rotate-right-y"},zAxis:{rotateLeft:"#rotate-left-z",rotateRight:"#rotate-right-z"},position:{reset:"#reset-position"},zoom:{resetZoom:"#reset#zoom"}},container:{id:"mainImage"},resourcesPath:"template/js/"};return e.object={init:function(){$("#mainImage").length>0&&this.imageLoadHandler()},initControls(){$("#rotate-right-x").on("click",(function(){t.controls.rotateRight()})),$("#rotate-left-x").on("click",(function(){t.controls.rotateLeft()})),$("#reset-position").on("click",(function(){t.controls.reset(!0)}))},imageLoadHandler:function(){if("image"==(i=$("#mediaType").val())){goobiWorkflowJS.object.freeJSResources();let o=$("#persistenceId").val();o&&o.length>0&&(r.global.persistenceId=o,r.global.persistZoom=!0,r.global.persistRotation=!0);var n=$("#tileSource").val();r.image.tileSource=n,(t=new ImageView.Image(r)).load().then((function(){goobiWorkflowJS.layout.setObjectViewHeight(),e.object.initControls(),e.object.initAreas(),t.controls.goHome(),t.observables&&t.observables.firstTileLoaded.subscribe((()=>{}),(e=>{console.error("imageLoadHandler: Error loading image",e),$("#"+r.global.divId).html("Failed to load image tile: "+e.message)}))})).then((()=>{let e=$("#tileSource_next").val();e&&this.preCache(e,"precacheNext")})).then((()=>{let e=$("#tileSource_previous").val();e&&this.preCache(e,"precachePrevious")})).catch((function(e){console.error("imageLoadHandler: Error opening image",e),$("#"+r.global.divId).html("Failed to load image: "+e.message)}))}else if("object"==i)$("#imageLoader").show(),goobiWorkflowJS.layout.setObjectViewHeight(),(o=WorldGenerator.create(l)).loadObject({url:$("#objectUrl").val(),position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0},size:10,material:{color:4504371},focus:!0}).then((function(e){$("#imageLoader").fadeOut(2e3),console.info("imageLoadHandler: loaded",e),o.render()})).catch((function(e){$("#imageLoader").fadeOut(2e3),console.error("imageLoadHandler: failed to load: ",e)}));else if("x3dom"==i){var a=$("#objectUrl").val();$("#imageLoader").show(),(new X3DLoader).load($("#mainImage"),a,(function(){$("#imageLoader").fadeOut(2e3),console.info("imageLoadHandler: loaded")}),(function(){console.info("imageLoadHandler: progress")}),(function(e){$("#imageLoader").fadeOut(2e3),console.info("imageLoadHandler: error",e)}))}},setDrawArea(e,t){this.drawArea=e,this.areaId=t},isDrawArea(){return this.drawArea},initAreas(){if($("#disable-interaction-overlay").hide(),this.drawer=new ImageView.Draw(t.viewer,s,(()=>this.isDrawArea())),this.drawer.finishedDrawing().subscribe(function(e){console.log("finished drawing",this),e.style=$.extend({},s,{borderColor:this.colors.next()}),e.draw(),this.addOverlay(e),this.setDrawArea(!1),this.drawnOverlay=e,this.transformer.addOverlay(e),this.endDrawArea(),this.addArea(e),"current"==this.areaTarget&&this.highlight(e),$("#disable-interaction-overlay").hide()}.bind(this)),this.transformer=new ImageView.Transform(t.viewer,s,(()=>!this.isDrawArea())),this.transformer.finishedTransforming().subscribe(function(e){this.setArea(e)}.bind(this)),this.areaString=$("#pageareas").text(),this.areaString){let e=JSON.parse(this.areaString);this.drawnOverlay=void 0,this.drawAreas(e)}else this.drawAreas([]);e.jsfAjax.success.subscribe((e=>{let t=$("#pageareas").text();if(this.areaString!=t)if(this.areaString=t,this.areaString){let e=JSON.parse(this.areaString);this.drawnOverlay=void 0,this.drawAreas(e)}else this.drawAreas([])})),this.initDeletePageAreas()},addOverlay(e){e&&(this.overlays.push(e),this.overlays.sort(((e,t)=>e.highlight?-1:t.highlight?1:0)))},startDrawArea(e,t){console.log("start draw area",e,t),this.drawnOverlay&&t==this.getAreaTarget()&&this.drawnOverlay.remove(),this.setDrawArea(!0),this.setAreaTarget(t),$(e).hide(),$(".cancel-area-edition").hide(),$(e).next(".cancel-area-edition").show(),$("#disable-interaction-overlay").show()},cancelDrawArea(){this.isDrawArea()?(this.setDrawArea(!1),this.endDrawArea()):(this.drawnOverlay&&this.drawnOverlay.remove(),this.endDrawArea(),cancelPageAreaEdition()),$(".cancel-area-edition").hide()},endDrawArea(){$("#disable-interaction-overlay").hide(),$(".start-area-edition").show()},setAreaTarget(e){this.areaTarget=e},getAreaTarget(){return this.areaTarget},addArea(e){let t=this.writeArea(e);t.addTo=this.areaTarget,addPageArea(t),"current"==this.areaTarget&&(this.drawnOverlay=void 0,$(".cancel-area-edition").hide(),$(".start-area-edition").show())},setArea(e){let t=this.writeArea(e);console.log("set area",e,t),setPageArea(t)},deleteArea(e){deletePageArea({areaId:e.areaId})},cancelPageAreaEdition(){cancelPageAreaEdition()},initDeletePageAreas(){this.endDeletePageMode(),$(document).off("click","[data-pagearea-delete='start']").on("click","[data-pagearea-delete='start']",(e=>{this.startDeletePageMode()})),$(document).off("click","[data-pagearea-delete='cancel']").on("click","[data-pagearea-delete='cancel']",(e=>{this.endDeletePageMode()}))},startDeletePageMode(){$("[data-pagearea-delete='start']").hide(),$("[data-pagearea-delete='cancel']").show(),null==this.deleteHandler&&(this.deleteHandler=e=>{this.overlays.every((t=>!t.contains(e.position,5,!0)||(deletePageArea({areaId:t.areaId}),t.remove(),this.transformer.removeOverlay(t),this.endDeletePageMode(),!1)))}),t.viewer.addHandler("canvas-click",this.deleteHandler)},endDeletePageMode(){$("[data-pagearea-delete='cancel']").hide(),$("[data-pagearea-delete='start']").show(),null!=this.deleteHandler&&(t.viewer.removeHandler("canvas-click",this.deleteHandler),this.deleteHandler=null)},drawAreas(e){this.overlays&&this.overlays.forEach((e=>{e.remove(),this.transformer.removeOverlay(e)})),$("#pageAreaName").val(""),this.overlays=[],this.colors=new ImageView.ColorIterator(a);var o=!1;for(var i of e){if(i.x)try{var n=new OpenSeadragon.Rect(parseInt(i.x),parseInt(i.y),parseInt(i.w),parseInt(i.h)),r=ImageView.CoordinateConversion.convertRectFromImageToOpenSeadragon(n,t.viewer,t.getOriginalImageSize()),l=new ImageView.Overlay(r,t.viewer,s,!0);l.style=$.extend({},s,{borderColor:this.colors.next()}),l.areaId=i.areaId,i.highlight&&this.highlight(l),l.draw(),this.transformer.addOverlay(l),this.addOverlay(l)}catch(e){}else o=!0;i.label&&!i.logId&&$("#pageAreaName").val(i.label)}o?($("#disable-interaction-overlay").show(),this.setDrawArea(!0,i.id)):this.setDrawArea(!1,null)},highlight(e){e.highlight=!0,e.style.fillColor=e.style.borderColor,e.style.opacity=.3,t.viewer.forceRedraw()},unHighlight(e){e.highlight=!1,e.style.fillColor=null,t.viewer.forceRedraw()},writeArea(e){var o={},i=ImageView.CoordinateConversion.convertRectFromOpenSeadragonToImage(e.rect,t.viewer,t.getOriginalImageSize());return i&&(o.areaId=e.areaId,o.x=Math.round(i.x),o.y=Math.round(i.y),o.w=Math.round(i.width),o.h=Math.round(i.height)),o},freeJSResources:function(e){if(e&&"begin"!=e.status);else if(t&&t.close(),o&&o.dispose(),n!=[]){for(var i in n)n[i].close();n=[]}},preCache(e,t){if(!document.querySelector("#"+t)){let e=$("<div id='"+t+"' />");$("main").append(e)}let o={global:{divId:t,imageControlsActive:!1,tabIndex:-1},image:{tileSource:e}};var i=new ImageView.Image(o);i.load().catch((t=>console.log("error precaching url "+e))),n.push(i)}},e}((goobiWorkflowJS=function(e){"use strict";var t={};function o(){if(!window.imageNavBlockers)return!1;let e=!1;for(let t of window.imageNavBlockers)t.check()&&!confirm(t.confirm)&&(e=!0);return e}return e.navigation={init:function(e){$.extend(!0,t,e),$(document).bind("keyup",t.navigationShortcut+"+right",(function(e){if(!o()){var t=document.getElementById("nextImage");null!=t&&t.click()}})),$(document).bind("keyup",t.navigationShortcut+"+left",(function(){if(!o()){var e=document.getElementById("prevImage");null!=e&&e.click()}})),$(document).bind("keyup",t.navigationShortcut+"+up",(function(){if(!o()){var e=document.getElementById("imageNext20");null!=e&&e.click()}})),$(document).bind("keyup",t.navigationShortcut+"+down",(function(){if(!o()){var e=document.getElementById("imageBack20");null!=e&&e.click()}})),$(document).bind("keyup",t.navigationShortcut+"+home",(function(){if(!o()){var e=document.getElementById("imageFirst");null!=e&&e.click()}})),$(document).bind("keyup",t.navigationShortcut+"+end",(function(){if(!o()){var e=document.getElementById("imageLast");null!=e&&e.click()}})),$(document).bind("keyup",t.navigationShortcut+"+return",(function(){var e=document.getElementById("meMenuActionsForm:saveMetsFileButtonAjax");null!=e&&e.click()})),$(document).bind("keyup",t.navigationShortcut+"+v",(function(){var e=document.getElementById("meMenuActionsForm:startValidationButton");null!=e&&e.click()})),$(document).bind("keyup",t.navigationShortcut+"+space",(function(){var e=$("#hiddenImageNo").val();null==e&&(e=$("#hiddenImageNoThumb").val());var t=document.getElementById("pagesList:"+e+":checkbox");t.checked?t.checked=!1:t.checked=!0,t.focus(),t.blur()})),$("input:checkbox").bind("keyup",t.navigationShortcut+"+right",(function(){var e=document.getElementById("nextImage");null!=e&&e.click()})),$("input:checkbox").bind("keyup",t.navigationShortcut+"+left",(function(){var e=document.getElementById("prevImage");null!=e&&e.click()})),$("input:checkbox").bind("keyup",t.navigationShortcut+"+up",(function(){var e=document.getElementById("imageNext20");null!=e&&e.click()})),$("input:checkbox").bind("keyup",t.navigationShortcut+"+down",(function(){var e=document.getElementById("imageBack20");null!=e&&e.click()})),$("input:checkbox").bind("keyup",t.navigationShortcut+"+home",(function(){var e=document.getElementById("imageFirst");null!=e&&e.click()})),$("input:checkbox").bind("keyup",t.navigationShortcut+"+end",(function(){var e=document.getElementById("imageLast");null!=e&&e.click()})),$("input:checkbox").bind("keyup",t.navigationShortcut+"+return",(function(){var e=document.getElementById("meMenuActionsForm:saveMetsFileButtonAjax");console.log(e),null!=e&&e.click()})),$("input:checkbox").bind("keyup",t.navigationShortcut+"+v",(function(){var e=document.getElementById("meMenuActionsForm:startValidationButton");console.log(e),null!=e&&e.click()})),$("input:checkbox").bind("keyup",t.navigationShortcut+"+space",(function(){var e=$("#hiddenImageNo").val();for(i=0;i<document.getElementsByName("myCheckboxes").length;i++)if(i==e){var t=document.getElementsByName("myCheckboxes")[i];t.checked?t.checked=!1:t.checked=!0}}))}},e}((goobiWorkflowJS=function(e){"use strict";return e.modals={init:function(){}},e}((goobiWorkflowJS=function(e){"use strict";return e.menu={init:function(){$("body").on("click",'[data-show="submenu"]',(function(e){$(this).next().is(":visible")?($(".submenu").hide(),$(this).next().hide()):($(".submenu").hide(),$(this).next().show())})),$("body").on("click",(function(e){"navigation"==e.target.id||$(e.target).closest("#navigation").length||"navigationActions"==e.target.id||$(e.target).closest(".navigationActions").length||$(".submenu").hide()})),$("body").on("click",'[data-toggle="mobile-menu"]',(function(){$("#navigation").slideToggle(200)})),$("body").on("click",'[data-toggle="mobile-image"]',(function(){$(this).toggleClass("in"),$("#pageContentRight").toggleClass("in")}))}},e}((goobiWorkflowJS=function(e){"use strict";return e.meScrollPos={init:function(e,{view:t=goobiWorkflowConfig.currentView,saveScrollPos:o=!0}={}){this.updateView(e,t),this.restoreScrollPosCenter(e,o)},updateView:function(e,t){"success"===e.status&&(goobiWorkflowConfig.currentView=t)},getScrollPosKey:function(e){const t={Paginierung:"mePagination",Strukturdaten:"meStructData",Metadaten:"meMetadata",File:"meFile",default:"default"};return t[e]||t.default},getErrorMsgHeight:function(){const e=document.querySelector("#messages"),t=getComputedStyle(e);let o=e.offsetHeight;return o+=parseInt(t.marginTop),o+=parseInt(t.marginBottom),o},restoreScrollPosCenter:function(e,t){t&&"begin"===e.status&&this.storeScrollPos(),"success"===e.status&&this.restoreScrollPos()},storeScrollPos:function(){const e=document.querySelector("#pageContentLeft"),t=document.querySelector("#pageContentCenter"),o=goobiWorkflowConfig.currentView,i=this.getScrollPosKey(o),n=sessionStorage.getItem("gw_me_scrollPos"),a=t.scrollTop-this.getErrorMsgHeight();let r={};n&&(r=JSON.parse(n)),r.default="0",r.meLeft=e.scrollTop,r[i]=a,sessionStorage.setItem("gw_me_scrollPos",JSON.stringify(r))},restoreScrollPos:function(){const e=document.querySelector("#pageContentLeft"),t=document.querySelector("#pageContentCenter"),o=goobiWorkflowConfig.currentView,i=this.getScrollPosKey(o),n=JSON.parse(sessionStorage.getItem("gw_me_scrollPos"));if(!n)return;const a=n[i];goobiWorkflowJS.box.getBoxStatus(),e.scrollTop=n.meLeft,t.scrollTop=a+this.getErrorMsgHeight()},destroyScrollPos:function(){sessionStorage.removeItem("gw_me_scrollPos")}},e}((goobiWorkflowJS=function(e){"use strict";var t=!1,o={left:0,center:0,right:0,handles:{left:0,right:0}},i={};function n(){t&&console.log("EXECUTE: _setColumnWidth"),o.left=$("#pageContentLeft").outerWidth(),o.center=$("#pageContentCenter").outerWidth(),o.right=$("#pageContentRight").outerWidth(),o.handles.left=parseInt($("#pageContentLeft .ui-resizable-handle").css("left")),o.handles.right=parseInt($("#pageContentRight .ui-resizable-handle").css("right")),sessionStorage.setItem("wf_columnWidths",JSON.stringify(o))}function a(){t&&console.log("EXECUTE: _setResizeEvents"),t&&console.log("EXECUTE: _resetResizableElements"),$("#pageContentLeft").css("width","20%"),i.displayImageArea?$("#pageContentCenter, #pageContentRight").css("width","40%"):$("#pageContentCenter").css("width","80%"),$("#pageContentLeft .ui-resizable-handle").css("left",$("#pageContentLeft").outerWidth()),$("#pageContentLeft .ui-resizable-handle").attr("tabindex","-1"),$("#pageContentRight .ui-resizable-handle").css("right",$("#pageContentRight").outerWidth()-7),$("#pageContentRight .ui-resizable-handle").attr("tabindex","-1"),$("#structureActions").css("left",$("#pageContentLeft").width()-45),n(),r(),goobiWorkflowJS.layout.setObjectViewHeight(),s()}function r(){t&&console.log("EXECUTE: _getSavedWidths"),null!=sessionStorage.getItem("wf_columnWidths")&&(o=JSON.parse(sessionStorage.getItem("wf_columnWidths")),i.displayImageArea?($(window).outerWidth()<o.left+o.center+o.right||null==o.right?($("#pageContentLeft").outerWidth(Math.floor(o.left)),$("#pageContentCenter").outerWidth(Math.floor(($(window).width()-$("#pageContentLeft").outerWidth())/2)),$("#pageContentRight").outerWidth(Math.floor($(window).width()-$("#pageContentLeft").outerWidth())/2)):($("#pageContentLeft").outerWidth(Math.floor(o.left)),$("#pageContentCenter").outerWidth(Math.floor(o.center)),$("#pageContentRight").outerWidth(Math.floor(o.right)-1)),$("#pageContentLeft .ui-resizable-handle").css("left",o.handles.left),$("#pageContentRight .ui-resizable-handle").css("right",o.handles.right)):($("#pageContentLeft").outerWidth(o.left),$("#pageContentCenter").outerWidth($(window).width()-$("#pageContentLeft").outerWidth()),$("#pageContentLeft .ui-resizable-handle").css("left",o.handles.left)))}function s(){t&&console.log("EXECUTE: _setFlexibleRowColumns"),$(".row-flexible").width()>0&&$(".row-flexible").width()<550?$(".row-flexible").addClass("fullwidth"):$(".row-flexible").removeClass("fullwidth")}return e.layout={init:function(e){t&&console.log("Initializing: goobiWorkflowJS.layout.init"),$.extend(!0,i,e),window.matchMedia("(min-width: 993px)").matches&&(window.addEventListener("resize",a),window.addEventListener("orientationchange",a),t&&console.log("EXECUTE: _setResizableElements"),$("#pageContentLeft").resizable({handles:"e",minWidth:200,maxWidth:.45*$(window).width(),resize:function(e,t){i.displayImageArea?($("#pageContentCenter").outerWidth($(window).outerWidth()-$("#pageContentRight").outerWidth()-$("#pageContentLeft").outerWidth()-1),$("#pageContentLeft .ui-resizable-handle").css("left",$("#pageContentLeft").outerWidth()),$("#structureActions").css("left",$("#pageContentLeft").width()-45)):($("#pageContentCenter").outerWidth($(window).outerWidth()-$("#pageContentLeft").outerWidth()),$("#pageContentLeft .ui-resizable-handle").css("left",$("#pageContentLeft").outerWidth()),$("#structureActions").css("left",$("#pageContentLeft").width()-45)),goobiWorkflowJS.layout.setObjectViewHeight(),s(),n()}}).on("resize",(function(e){e.stopPropagation()})),$("#pageContentRight").resizable({handles:"w",minWidth:400,maxWidth:$(window).width()/2,resize:function(e,t){$("#pageContentCenter").outerWidth($(window).outerWidth()-$("#pageContentRight").outerWidth()-$("#pageContentLeft").outerWidth()-1),$("#pageContentRight .ui-resizable-handle").css("right",$("#pageContentRight").outerWidth()-7),goobiWorkflowJS.layout.setObjectViewHeight(),s(),n()}}).on("resize",(function(e){e.stopPropagation()})),$("#pageContentLeft .ui-resizable-handle").attr("tabindex","-1"),$("#pageContentRight .ui-resizable-handle").attr("tabindex","-1"),r()),t&&console.log("EXECUTE: _setThumbnailsMargin"),$("#pageContentWrapper").show(),s(),$("#structureActions").css("left",$("#pageContentLeft").width()-45),t&&console.log(" EXECUTE: _setTabindex"),$(".focusableChildCss input").addClass("focusable"),$(".focusable").attr("tabindex","0"),$(".focusableChild input").attr("tabindex","0"),$(".notFocusable").attr("tabindex","-1"),$(".notFocusableChild").children().attr("tabindex","-1"),this.setImageCommentHeight()},setObjectViewHeight:function(){t&&console.log("EXECUTE: goobiWorkflowJS.layout.setObjectViewHeight");var e=$("#pageContentRight").outerHeight(),o=$("#imageNavigation").outerHeight(),i=$("#imageCommentArea").outerHeight();i||(i=0),$("#mainImage").css("height",e-o-i-45)},setImageCommentHeight:function(){var e=document.querySelector("#Comment");if(e){function t(){var t=Math.max(1,e.value.split("\n").length);e.style.height=17*t+13+"px"}t(),e.addEventListener("input",t)}}},e}((goobiWorkflowJS=function(e){"use strict";return e.jumpToPage={init:function(){$("body").on("click","#currentPage, #currentPagePrefix",(function(){var e=$("#currentPagePrefix"),t=e[0].getBoundingClientRect().width,o=e[0].getBoundingClientRect().height;e.next().css("width",t),e.next().css("height",o),e.hide(),e.next().css("display","inline-block"),$("#jumpToImageAutocomplete input").focus()})),$("body").on("blur","#jumpToImageAutocomplete input",(function(){$("#jumpToImageAutocomplete").hide(),$("#currentPagePrefix").show()})),$("body").on("click","#jumpToPage",(function(){$(this).hide(),$(this).next().css("display","inherit"),$("#jumpToThumbAutocomplete input").focus()})),$("body").on("blur","#jumpToThumbAutocomplete input",(function(){$("#jumpToThumbAutocomplete").hide(),$("#jumpToPage").show()}))}},e}((goobiWorkflowJS=function(e){"use strict";var t={};return e.jsfAjax={begin:new rxjs.Subject,complete:new rxjs.Subject,success:new rxjs.Subject,init:function(o){$.extend(!0,t,o),"undefined"!=typeof jsf&&jsf.ajax.addOnEvent((function(o){var i=document.getElementById("ajaxloader");switch(o.status){case"begin":e.jsfAjax.begin.next(o),$(".btn").hasClass("btn--loader")&&$(".btn-ajax-loader").addClass("in"),i.style.display="block","true"==o?.source?.dataset.renderimage&&goobiWorkflowJS.object.freeJSResources(),e.tinymce.renderInputFields(o);break;case"complete":e.jsfAjax.complete.next(o),i.style.display="none";break;case"success":if(e.jsfAjax.success.next(o),$(".btn").hasClass("btn--loader")&&$(".btn-ajax-loader").removeClass("in"),goobiWorkflowJS.cleanUpBootstrapFeatures(),goobiWorkflowJS.initBootstrapFeatures(),goobiWorkflowJS.layout.init(),"true"==o?.source?.dataset.renderimage&&(goobiWorkflowJS.object.imageLoadHandler(),goobiWorkflowJS.thumbnails.init()),"saveAltoChanges"!=o?.source?.id&&"altoEditorAutocompleteScript"!=o?.source?.id){var n=document.querySelector("alto-editor");n&&n._tag&&(n._tag.unmount(!0),"undefined"!=typeof riot&&openAltoEditor(!0))}if(window.riot_mounts&&"undefined"!=typeof riot)for(let e of Object.keys(window.riot_mounts))if(document.querySelector(e))if(document.querySelector(e)._tag){let t=riot_mounts[e]();riot.update(e,t)}else riot.mount(e,riot_mounts[e]());setTimeout((function(){$('*[data-fadeoutmessages="true"] li').fadeOut(1e3)}),1500),goobiWorkflowJS.box.getBoxStatus(),goobiWorkflowJS.buttons.init(),goobiWorkflowJS.bookmarks.init(),goobiWorkflowJS.tinymce.init(t),goobiWorkflowJS.setAutocompleteListHandler(),goobiWorkflowJS.layout.setImageCommentHeight()}}))}},e}((goobiWorkflowJS=function(){"use strict";var e={metseditor:{thumbnails:{maxParallelRequests:100}}},t={init:function(t){$.extend(!0,e,t),console.info("Current View: ",e.currentView),goobiWorkflowJS.initBootstrapFeatures(),goobiWorkflowJS.layout.init(e),goobiWorkflowJS.menu.init(),goobiWorkflowJS.box.init(),goobiWorkflowJS.buttons.init(e),goobiWorkflowJS.tinymce.init(e),goobiWorkflowJS.object.init(),goobiWorkflowJS.bookmarks.init(),goobiWorkflowJS.jumpToPage.init(),goobiWorkflowJS.scrollPositions.init(),goobiWorkflowJS.navigation.init(e),goobiWorkflowJS.buttons.init(e),"false"===e.readOnlyMode&&goobiWorkflowJS.autoSave(e.autoSaveInterval),goobiWorkflowJS.structdata.init(),goobiWorkflowJS.modals.init(),goobiWorkflowJS.thumbnails.init(e.metseditor.thumbnails),goobiWorkflowJS.jsfAjax.init(e),$(".focusable").attr("tabindex","0"),$(".focusableChild input").attr("tabindex","0"),$(".notFocusable").attr("tabindex","-1"),$(".notFocusableChild").children().attr("tabindex","-1")},initBootstrapFeatures:function(){$('[data-toggle="tooltip"]').tooltip({trigger:"hover focus"}),$('[data-toggle-second="tooltip"]').tooltip(),$('[data-toggle="popover"]').popover({html:!0})},cleanUpBootstrapFeatures:function(){$(".popover").length>0?$(".popover").remove():$(".tooltip").length>0&&$(".tooltip").remove()},printPage:function(){var e=document.getElementById("left").innerHTML,t=document.createElement("link");t.rel="stylesheet",t.type="text/css",t.href="#{HelperForm.servletPathWithHostAsUrl}/uii/template/css/intranda.css?version=1";var o=window.open("","","");o.document.getElementsByTagName("head")[0].appendChild(t),o.document.body.innerHTML=e,o.window.print(),o.close()},submitEnter:function(e,t){var o;if(window.event)o=window.event.keyCode;else{if(!t)return!0;o=t.which}return 13!=o||(document.getElementById(e).click(),!1)},setAutocompleteListHandler:function(e,o){if(!t.submitEnter(e,o))return!1;setTimeout((function(){$(".ui-autocomplete-panel li").length>0&&$(".ui-autocomplete-panel li").on("click",(function(){null!=document.getElementById("goButton")?document.getElementById("goButton").click():document.getElementById("goButtonThumbs").click()}))}),1e3)},displayProgressBar:function(){var e=document.getElementById("progressPanel");"block"==e.style.display?e.style.display="none":e.style.display="block",document.getElementById("progressbutton").click()},autoSave:function(e){var t=parseInt(e);t>0&&setInterval((function(){var e=document.getElementById("meMenuActionsForm:automaticSave");null!=e&&e.click()}),1e3*t*60)},fireOnEnter:function(e,t){$("#"+e).on("keyup",(function(e){e.preventDefault(),13==e.keyCode&&$("#"+t).click()}))},loadPlugin:function(e,t){"success"===e.status&&(console.log(t),$(t).modal("show"))}};return t}(jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery))||{},jQuery),$(document).ready((function(){target=parseInt($("#contentArea").width())-parseInt($("#pagLeft").width())-10,addPaginationButtons(),0!=$(".popover.fade.right.in").length&&$(".popover.fade.right.in").remove()})),window.onload=function(){loadImages()},loadThumbnails(),freeJSResources({status:"success"}),$(document).ready((function(){$("#left").scrollTop("#{NavigationForm.uiStatus.mets_scrollPosition}");var e=$("#structdata");null!=e&&e.scrollTop("#{NavigationForm.uiStatus.mets_scrollPositionStructData}")}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
