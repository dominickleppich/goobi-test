{"version":3,"file":"main.js","sources":["../templatePG/js/modules/gwFocusOnLoad.js","../templatePG/js/modules/gwInitTooltips.js","../templatePG/js/modules/gwAjaxLoader.js","../templatePG/js/modules/gwHandleTooltip.js","../templatePG/js/modules/gwNavigation.js","../templatePG/js/modules/gwResizableTable.js","../templatePG/js/modules/gwToggleHelp.js"],"sourcesContent":["/**\n * @description Sets focus on the first element with a data attribute of `data-gw-focus-on-load=\"true\"`.\n * Alternatively an id, class etc. can be passed to query the element.\n */\nexport default gwFocusOnLoad = ( function() {\n    'use strict';\n\n    var _debug = false;\n    var _defaultSelector = '[data-gw-focus-on-load=\"true\"]';\n\n    function init(selector) {\n      if (_debug) console.log('%c### Initialized gwFocusOnload ###', 'color: #368ee0')\n\n      window.addEventListener(\"DOMContentLoaded\", _setFocus(selector));\n    }\n\n    function _setFocus(selector = _defaultSelector) {\n      try {\n        const el = document.querySelector(selector);\n        el.focus();\n\n        // Debugging\n        if(_debug){\n          console.log('%c### Called _setFocus ###', 'color: #368ee0')\n          console.log('selector:', selector)\n          console.log('queried element:', el)\n\n        }\n      }\n      catch (error) {\n        if (_debug) console.log(error)\n      }\n    }\n\n    return {\n      init\n    }\n} )();\n","/**\n * @description Destroy ALL tooltips and initialize again.\n *\n */\n\nexport default gwInitTooltips = ( function() {\n  'use strict';\n\n  var _debug = false;\n  var _defaults = {\n    scope: document,\n    selectors: '[data-bs-toggle=\"tooltip\"], [data-toggle=\"tooltip\"]',\n  }\n\n  function init({ scope = _defaults.scope } = {}) {\n    _initTooltips(scope);\n    _initPopovers();\n  }\n\n  /** @description find and return all elements that have a tooltip */\n  function _getTooltipTriggers(scope) {\n    var tooltipTriggerList =\n      [].slice.call(\n        scope.querySelectorAll(_defaults.selectors)\n      )\n    return tooltipTriggerList\n  }\n\n  /** @description Initialize tooltips.  */\n  function _initTooltips(scope) {\n    const tooltipTriggers = _getTooltipTriggers(scope);\n\n    // Initialize tooltips\n    tooltipTriggers.map(function (tooltipTriggerEl) {\n      return hoverableTooltip(tooltipTriggerEl)\n    })\n\n    // Debugging\n    if (_debug) console.log('%c### called gwInitTooltips._initTooltips.js ###', 'color: #368ee0')\n    if (_debug) console.log({ tooltipTriggers })\n  }\n\n  /** @description Initialize popovers.  */\n  function _initPopovers() {\n    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'))\n  var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {\n    return hoverablePopover(popoverTriggerEl)\n    })\n  }\n\n  return {\n    init\n  }\n\n} )();\n\n/**\n* Utility function to improve accessibility for Bootstrap tooltips to conform\n* to WCAG 2.1 criterion 1.14.13 \"Content on Hover or Focus\"\n*\n* @param {*} element The element that triggers the Bootstrap tooltip\n* @returns A bootstrap tooltip\n*/\nconst hoverableTooltip = function keepTooltipOpenOnHoverOverContent(element) {\n  let tooltip = new bootstrap.Tooltip(element, {\n    trigger: 'manual'\n  });\n  let tooltipTimeOut;\n\n  ['mouseenter', 'focusin'].forEach((eventType) => {\n    element.addEventListener(eventType, (event) => {\n      event.preventDefault;\n      event.stopPropagation;\n\n      clearTimeout(tooltipTimeOut);\n      tooltip.show();\n\n      tooltip.tip.addEventListener('mouseleave', () => {\n        event.preventDefault;\n        event.stopPropagation;\n\n        tooltip.hide();\n      });\n\n      window.addEventListener('keydown', (event) => {\n        event.preventDefault;\n        event.stopPropagation;\n\n        if (event.key === 'Escape') {\n          tooltip.hide();\n        }\n      });\n\n    });\n  });\n\n  ['mouseleave', 'focusout'].forEach((eventType) => {\n    element.addEventListener(eventType, (event) => {\n      event.preventDefault;\n      event.stopPropagation;\n\n      tooltipTimeOut = setTimeout(() => {\n        if (!tooltip.tip.matches(':hover')) {\n          tooltip.hide();\n        }\n      }, 200);\n\n    });\n  });\n\n  return tooltip;\n};\n\n/**\n* Utility function to improve accessibility for Bootstrap popovers to conform\n* to WCAG 2.1 criterion 1.14.13 \"Content on Hover or Focus\"\n*\n* @param {*} element The element that triggers the Bootstrap popover\n* @returns A bootstrap popover\n*/\nconst hoverablePopover = function keepPopoverOpenOnHoverOverContent(element) {\n  let popover = new bootstrap.Popover(element, {\n    trigger: 'manual'\n  });\n  let popoverTimeOut;\n\n  ['mouseenter', 'focusin'].forEach((eventType) => {\n    element.addEventListener(eventType, (event) => {\n      event.preventDefault;\n      event.stopPropagation;\n      clearTimeout(popoverTimeOut);\n      popover.show();\n      popover.tip.addEventListener('mouseleave', () => {\n        event.preventDefault;\n        event.stopPropagation;\n        popover.hide();\n      });\n      window.addEventListener('keydown', (event) => {\n        event.preventDefault;\n        event.stopPropagation;\n        if (event.key === 'Escape') {\n          popover.hide();\n        }\n      });\n    });\n  });\n\n  ['mouseleave', 'focusout'].forEach((eventType) => {\n    element.addEventListener(eventType, (event) => {\n      event.preventDefault;\n      event.stopPropagation;\n      popoverTimeOut = setTimeout(() => {\n        if (!popover.tip.matches(':hover')) {\n          popover.hide();\n        }\n      }, 200);\n    });\n  });\n\n  return popover;\n};\n","/** @description Show and hide goobi's ajaxLoader (âˆž).\n */\nexport default gwAjaxLoader = ( function() {\n    'use strict';\n\n    var _debug = false;\n    var _defaultSelector = '#ajaxloader';\n\n    function init(selector) {\n      if (_debug) console.log('%c## Initialized gwAjaxLoader ##', 'color: #368ee0')\n\n      // listen for jsf ajax envents\n      jsf.ajax.addOnEvent((data) => _handleAjaxLoader(data, selector = _defaultSelector))\n\n    }\n\n    function _handleAjaxLoader(data, selector) {\n      if (_debug) console.log('%c## called gwAjaxLoader._handleAjaxLoader ##', 'color: orange')\n      try {\n\n        jsf.ajax.addOnEvent(function (data) {\n          const ajaxstatus = data.status; // Can be \"begin\", \"complete\" and \"success\"\n          const ajaxloader = document.querySelector(selector);\n          const source = data.source;\n          const noLoaderGif = source.type == \"hidden\" && source.id.indexOf(\"header\") == 0;\n\n          switch (ajaxstatus) {\n            case \"begin\": // This is called right before ajax request is been sent.\n              if(ajaxloader && !noLoaderGif) ajaxloader.style.display = 'block';\n              break;\n\n            case \"complete\": // This is called right after ajax response is received.\n              if(ajaxloader) ajaxloader.style.display = 'none';\n              break;\n\n            case \"success\": // This is called when ajax response is successfully processed.\n             scrollDownScrollDowns();\n              break;\n\n          }\n        });\n\n\n      }\n      catch (error) {\n        if (_debug) console.log(error)\n      }\n    }\n\n  return {\n    init\n  }\n} )();\n","/**\n * @description Destroy tooltips on ajax call and initialize a new one if ajax call is done.\n *\n */\nexport default gwHandleTooltip = ( function() {\n    'use strict';\n\n    var _debug = false;\n    var _defaultSelector = '[data-goobi=\"handle-tooltip\"]'\n\n    function init(data, { selector = _defaultSelector, restore = true } = {})  {\n      // get the element triggering the ajax call\n      const trigger = bootstrap.Tooltip.getInstance(data.source)\n      _removeTooltip(trigger);\n\n      // Restore tooltips after ajax is done\n      if(!restore) return\n        _restoreTooltip(data, selector);\n\n    }\n\n    function _removeTooltip(trigger) {\n      if (_debug) console.log('%c## called gwHandleTooltip._removeTooltip ##', 'color: #368ee0')\n      trigger?.tip?.remove();\n    }\n\n    function _restoreTooltip(data, selector) {\n      if (_debug) console.log('%c### called gwHandleTooltip._restoreTooltip ###', 'color: orange')\n\n      // if ajax call is done, init a new tooltip\n      if (data.status === 'success') {\n        // get the rerendered trigger element\n        const tooltipTriggers = document.querySelectorAll(selector)\n\n        // fire up new tooltip instances (new instances are enabled by default)\n        tooltipTriggers.forEach(trigger => hoverableTooltip(trigger))\n\n        if (_debug) console.log(tooltipTriggers)\n      }\n    }\n\n\n    return {\n      init\n    }\n} )();\n","/**\n * @description Contains functions used in the navigation: `inc_menu.xhtml`, `inc_menu_main.xhtml` and `inc_menu_preferences.xhtml`.\n *\n */\nexport default gwNavigation = ( function() {\n    'use strict';\n\n    var _debug = false;\n\n\n    /**\n    * LOCALE SWITCHER: Show and hide tooltips\n    */\n    function toggleLangTooltip(target) {\n      if (_debug) console.log('%c### called gwNavigation.toggleLangTooltip.js ###', 'color: #368ee0')\n      const tooltip = bootstrap.Tooltip.getInstance(target)\n      const dropdownToggle = target.querySelector(\".nav-link\");\n      const dropdownIsExpanded = dropdownToggle.getAttribute('aria-expanded');\n\n      // Mutation observer\n      const observer = new MutationObserver((mutations, observerInstance) => {\n        mutations.forEach(mutation => {\n          // console.log(mutation, mutation.type)\n          if(mutation.attributeName === 'aria-expanded') {\n            if (dropdownIsExpanded === 'false') {\n              tooltip.disable();\n            }\n            if (dropdownIsExpanded === 'true') {\n              tooltip.enable();\n              // Stop watching for mutations\n              observerInstance.disconnect();\n            }\n          }\n        })\n      });\n\n      if (dropdownIsExpanded === 'true') {\n        tooltip.disable();\n        // Start watching for mutations on the dropdown toggle's attributes\n        observer.observe(dropdownToggle, {\n          attributes: true,\n        })\n      }\n\n      if (dropdownIsExpanded === 'false') {\n        // If a user clicks on the dropdown toggle while the dropdown is expanded\n        // => the tooltip is reenabled by the mutation observer (above)\n        // => we will then show the tooltip using this Bootstrap 5 fn\n        tooltip.show();\n      }\n    }\n\n\n    return {\n      toggleLangTooltip\n    }\n} )();\n","/**\n * This script allows users to resize the column widths of tables.\n *\n * REQUIREMENTS:\n * 1. the table MUST have the class 'table-resizable' for the script to identify it.\n * 2. the table MUST have an id for resizes to be persistent. Changes are saved to localStorage and\n *    looked up by table id.\n * 3. columns MUST have an id if their widths are being saved.\n * 4. the table MUST NOT have a fixed layout. If you can shrink columns so far you can't read the\n *    contents, most likely its styling is set to `table-layout: fixed`. Remove this style or\n *    the corresponding class.\n */\n\n/**\n * Ensures that an element's width does not exceed min-width or max-width, if these are defined.\n * @param {HTMLTableCellElement} col A column of the resizable table\n * @param {number} newWidth The new width for the column\n * @returns {number}\n */\nconst constrainWidth = function constrainWidth(col, newWidth) {\n    let constrainedWidth;\n    const maxWidth = getComputedStyle(col).getPropertyValue('max-width');\n    let minWidth = getComputedStyle(col).getPropertyValue('min-width');\n\n    minWidth = minWidth === \"0px\" ? \"60px\" : minWidth;\n    constrainedWidth = Math.max(parseInt(minWidth, 10), newWidth)\n\n    if (maxWidth !== 'none') {\n        constrainedWidth = Math.min(parseInt(maxWidth, 10), newWidth)\n    }\n\n    return constrainedWidth;\n};\n\n/**\n * Adapts the height of the resize handle so it stays the same as the height of the relevant table.\n * @param {HTMLDivElement} handle The resize handle\n */\nconst resizeHandles = function resizeHandles(col) {\n    const table = col.closest('.table-resizable');\n    const tableHeight = table.offsetHeight;\n    const handles = col.parentElement.querySelectorAll('.resize-handle');\n    [...handles].forEach((handle) => {\n        handle.style.setProperty('--handle-height', `${tableHeight}px`);\n    });\n};\n\n/**\n * Get a column's relative width in the table.\n * @param {HTMLTableCellElement} col A column of the resizable table\n * @returns The relative width\n */\nconst getRelWidth = function getRelativeWidth(col) {\n    const table = col.closest('.table-resizable');\n    const tableWidth = table.offsetWidth;\n    const relWidth = (col.offsetWidth / tableWidth) * 100;\n    return relWidth.toFixed(2);\n};\n\n/**\n * Save the current column widths to localStorage.\n * @param {HTMLTableCellElement} col A column of the resizable table\n */\nconst saveColWidths = function saveColWidths(col) {\n    const table = col.closest('.table-resizable');\n    if (!table.id) return;\n    const firstRow = table.getElementsByTagName('tr')[0];\n    const colWidths = [];\n    const cols = firstRow ? firstRow.children : undefined;\n    if (!cols) return;\n    [...cols].forEach((c) => {\n        if (c.id) {\n            const colInfo = {\n                id: c.id,\n                width: `${getRelWidth(c)}%`,\n            };\n            colWidths.push(colInfo);\n        }\n    });\n    localStorage.setItem(table.id, JSON.stringify(colWidths));\n};\n\n/**\n * Load and implement column widths from localStorage, if any are present for the current table.\n * @param {HTMLTableElement} table A resizable table\n */\nconst loadColWidths = function loadColWidths(table) {\n    const storage = JSON.parse(localStorage.getItem(table.id));\n    if (storage) {\n        storage.forEach((col) => {\n            try {\n                document.getElementById(col.id).style.width = col.width;\n                return 0;\n            } catch (error) {\n                return 1;\n            }\n        });\n    }\n};\n\n/**\n * Set a column's width as a percentage.\n * @param {HTMLTableCellElement} col A column of the resizable table\n */\nconst setRelWidth = function setRelativeWidth(col) {\n    const column = col;\n    column.style.width = `${getRelWidth(col)}%`;\n};\n\n/**\n * Create a resize handle for a table column\n * @param {number} height The height of the table\n * @returns {HTMLDivElement}\n */\nconst createHandle = function createHandle() {\n    const div = document.createElement('div');\n    div.classList.add('resize-handle');\n    return div;\n};\n\n/**\n * Attaches the necessary events to the resize handle.\n * @param {number} tableWidth The width of the table\n * @param {HTMLDivElement} handle The resize handle\n */\nconst setListeners = function setListeners(tableWidth, handle) {\n    let pageX;\n    let col;\n    let colWidth;\n    let newWidth;\n    let nextCol;\n    let nextColWidth;\n    let nextColNewWidth;\n    let diffX;\n    let totalWidth;\n\n    handle.addEventListener('mouseover', () => {\n        col = e.target.parentElement;\n        resizeHandles(col);\n    });\n\n    handle.addEventListener('click', (e) => {\n        if (e.detail === 2) {\n            col = e.target.parentElement;\n            colWidth = col.offsetWidth;\n            nextCol = col.nextElementSibling;\n            nextColWidth = nextCol.offsetWidth;\n            totalWidth = colWidth + nextColWidth;\n\n            newWidth = constrainWidth(col, 60);\n            nextColNewWidth = totalWidth - newWidth;\n            if (totalWidth === (newWidth + nextColNewWidth)) {\n                newWidth = (newWidth / tableWidth) * 100;\n                nextColNewWidth = (nextColNewWidth / tableWidth) * 100;\n\n                col.style.width = `${newWidth.toFixed(2)}%`;\n                nextCol.style.width = `${nextColNewWidth.toFixed(2)}%`;\n            }\n\n            col = undefined;\n            colWidth = undefined;\n            newWidth = undefined;\n            nextCol = undefined;\n            nextColWidth = undefined;\n            nextColNewWidth = undefined;\n            totalWidth = undefined;\n        }\n    });\n\n    handle.addEventListener('mousedown', (e) => {\n        col = e.target.parentElement;\n        pageX = e.pageX;\n        colWidth = col.offsetWidth;\n        nextCol = col.nextElementSibling;\n        nextColWidth = nextCol.offsetWidth;\n        totalWidth = colWidth + nextColWidth;\n    });\n\n    document.addEventListener('mousemove', (e) => {\n        if (col) {\n            diffX = e.pageX - pageX;\n            if (diffX === 0) {\n                return;\n            }\n\n            handle.classList.add('active');\n            resizeHandles(col);\n            // make the cursor style global so that it stays as resize handle regardless of position\n            document.getElementsByTagName('body')[0].classList.add('table-resizing');\n\n            nextColNewWidth = nextColWidth - diffX;\n            nextColNewWidth = constrainWidth(nextCol, nextColNewWidth);\n\n            newWidth = colWidth + diffX;\n            newWidth = constrainWidth(col, newWidth);\n\n            if (totalWidth === (newWidth + nextColNewWidth)) {\n                newWidth = (newWidth / tableWidth) * 100;\n                nextColNewWidth = (nextColNewWidth / tableWidth) * 100;\n\n                col.style.width = `${newWidth.toFixed(2)}%`;\n                nextCol.style.width = `${nextColNewWidth.toFixed(2)}%`;\n            }\n        }\n    });\n\n    document.addEventListener('mouseup', () => {\n        if (col) {\n            handle.classList.remove('active');\n            saveColWidths(col);\n        }\n        document.getElementsByTagName('body')[0].classList.remove('table-resizing');\n        pageX = undefined;\n        col = undefined;\n        colWidth = undefined;\n        newWidth = undefined;\n        nextCol = undefined;\n        nextColWidth = undefined;\n        nextColNewWidth = undefined;\n        diffX = undefined;\n        totalWidth = undefined;\n    });\n};\n\n/**\n * Prepares a table to make it resizable and calls all necessary functions\n * @param {HTMLTableElement} table A resizable table\n */\nconst initialize = function initializeResizeTable(table) {\n    const firstRow = table.getElementsByTagName('tr')[0];\n    const cols = firstRow ? firstRow.children : undefined;\n    if (!cols) return;\n    [...cols].forEach((col) => {\n        const column = col;\n        const tableWidth = table.offsetWidth;\n        const handle = createHandle();\n        resizeHandles(col);\n        setRelWidth(col);\n        column.appendChild(handle);\n        column.classList.add('resize-col');\n        setListeners(tableWidth, handle);\n    });\n};\n\n/**\n * Initialize resizable tables if there are any.\n */\nconst setup = function setupResizableTables() {\n    const tables = document.getElementsByClassName('table-resizable');\n    if (tables) {\n        [...tables].forEach((table) => {\n            loadColWidths(table);\n            initialize(table);\n        });\n    }\n};\n\nexport default gwResizableTable = (() => {\n    function init() {\n        setup();\n    }\n    function reload(data = 'none') {\n        if (data.status === 'success') {\n            setup();\n        }\n    }\n\n    return {\n        init,\n        reload,\n    };\n})();\n","/** @description Show and hide inline help.\n */\nexport default gwToggleHelp = ( function() {\n    'use strict';\n\n    let _debug = false;\n\n    function init(data) {\n      if (_debug) console.log('%c## Initialized gwToggleHelp.js ##', 'color: #368ee0')\n\n      if (data.status === 'success') {\n        const elements = document.querySelectorAll(\".help-block\");\n        for (let i = 0; i < elements.length; i++) {\n          elements[i].style.display = elements[i].style.display == 'block' ? 'none' : 'block';\n        }\n      }\n\n    }\n\n  return {\n    init\n  }\n} )();\n"],"names":["_defaultSelector","_defaults","gwAjaxLoader","init","selector","jsf","ajax","addOnEvent","data","ajaxstatus","status","ajaxloader","document","querySelector","source","noLoaderGif","type","id","indexOf","style","display","scrollDownScrollDowns","error","_handleAjaxLoader","gwFocusOnLoad","window","addEventListener","focus","_setFocus","gwHandleTooltip","restore","trigger","tip","remove","_removeTooltip","bootstrap","Tooltip","getInstance","querySelectorAll","forEach","hoverableTooltip","_restoreTooltip","gwInitTooltips","scope","selectors","tooltipTriggers","tooltipTriggerList","slice","call","_getTooltipTriggers","map","tooltipTriggerEl","_initTooltips","popoverTriggerEl","hoverablePopover","element","tooltipTimeOut","tooltip","eventType","event","preventDefault","stopPropagation","clearTimeout","show","hide","key","setTimeout","matches","popoverTimeOut","popover","Popover","gwNavigation","toggleLangTooltip","target","dropdownToggle","dropdownIsExpanded","getAttribute","observer","MutationObserver","mutations","observerInstance","mutation","attributeName","disable","enable","disconnect","observe","attributes","constrainWidth","col","newWidth","constrainedWidth","maxWidth","getComputedStyle","getPropertyValue","minWidth","Math","max","parseInt","min","resizeHandles","tableHeight","closest","offsetHeight","parentElement","handle","setProperty","getRelWidth","tableWidth","offsetWidth","toFixed","setListeners","pageX","colWidth","nextCol","nextColWidth","nextColNewWidth","diffX","totalWidth","e","detail","nextElementSibling","width","undefined","classList","add","getElementsByTagName","table","firstRow","colWidths","cols","children","c","colInfo","push","localStorage","setItem","JSON","stringify","saveColWidths","initialize","column","div","createElement","createHandle","setRelWidth","appendChild","setup","tables","getElementsByClassName","storage","parse","getItem","getElementById","loadColWidths","gwResizableTable","reload","gwToggleHelp","elements","i","length"],"mappings":"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"}